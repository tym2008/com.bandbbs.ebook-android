# 工作流的名称
name: Android CI Build

# 触发工作流的事件
on:
  # 当有代码推送到 main 或 master 分支时触发
  push:
    branches: [ "main", "master" ]
  # 允许你手动在 GitHub 网站的 Actions 页面触发此工作流
  workflow_dispatch:

# 定义工作任务
jobs:
  build:
    # 运行此任务的虚拟机环境
    runs-on: ubuntu-latest

    # 任务中的步骤
    steps:
      # 第一步：检出你的代码
      # 使用 actions/checkout@v4 这个官方 action 来获取仓库代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 第二步：设置 JDK 环境
      # 安卓开发需要 Java 环境，这里我们使用 JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 第三步：设置 Gradle 缓存
      # 缓存 Gradle 的依赖项，可以极大加快后续的编译速度
      - name: Gradle Cache
        uses: gradle/actions/setup-gradle@v3

      # 第四步：给 Gradle Wrapper 添加执行权限
      # 在 Linux/macOS 环境下，gradlew 脚本需要有执行权限
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 第五步：执行编译命令
      # 使用 Gradle Wrapper 来执行 assembleDebug 任务，它会编译出 Debug 版本的 APK
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # 第六步：上传构建产物 (APK 文件)
      # 将编译好的 APK 文件作为产物上传，方便你下载
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          # 产物的名称
          name: app-debug-apk
          # 要上传的文件的路径
          # 通常 Debug APK 在 app/build/outputs/apk/debug/ 目录下
          path: app/build/outputs/apk/debug/app-debug.apk
