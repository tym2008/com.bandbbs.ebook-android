# 工作流的名称
name: Android CI Build (with Wrapper Generation)

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 第1步：检出你的代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 第2步：设置 JDK 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # --- 这是新增的核心步骤 ---
      # 第3步：安装一个特定版本的 Gradle
      # 我们需要先读取项目希望使用的 Gradle 版本
      # 注意：如果 gradle/wrapper/gradle-wrapper.properties 文件不存在或内容不规范，这里可能会失败。
      # 我们假设 Gradle 版本是 8.4，如果你的项目需要其他版本，请修改下面的 'gradle-version'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          # 你可以硬编码一个你认为合适的 Gradle 版本。
          # 例如 '8.4'。检查你项目中的 gradle/wrapper/gradle-wrapper.properties 文件来确定最佳版本。
          # 如果那个文件不存在，选择一个较新的稳定版本，如 '8.6' 或 '8.7'。
          gradle-version: '8.13' 

      # 第4步：生成 Gradle Wrapper 文件
      # 使用上一步安装的 'gradle' 命令来为项目生成 wrapper
      - name: Generate Gradle Wrapper
        run: gradle wrapper

      # --- 后续步骤和之前类似，但现在 gradlew 文件已经存在了 ---

      # 第5步：给生成的 gradlew 添加执行权限
      # 这一步现在是必须的，因为文件是刚刚生成的
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 第6步：执行编译命令
      # 使用刚刚生成的 ./gradlew 脚本来编译
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # 第7步：上传构建产物 (APK 文件)
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
